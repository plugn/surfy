// Generated by CoffeeScript 1.4.0
(function() {
  var Asset, async, fs, jade, pathutil, uglify,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  pathutil = require('path');

  uglify = require('uglify-js');

  async = require('async');

  jade = require('jade');

  Asset = require('../index').Asset;

  exports.JadeAsset = (function(_super) {

    __extends(JadeAsset, _super);

    function JadeAsset() {
      return JadeAsset.__super__.constructor.apply(this, arguments);
    }

    JadeAsset.prototype.mimetype = 'text/javascript';

    JadeAsset.prototype.create = function(options) {
      var _this = this;
      this.dirname = pathutil.resolve(options.dirname);
      this.separator = options.separator || '/';
      this.compress = options.compress || false;
      this.clientVariable = options.clientVariable || 'Templates';
      this.beforeCompile = options.beforeCompile || null;
      this.fileObjects = this.getFileobjects(this.dirname);
      if (!this.rack) {
        return this.createContents();
      }
      this.clientRack = this.rack.createClientRack();
      return this.clientRack.on('complete', function() {
        return _this.createContents();
      });
    };

    JadeAsset.prototype.createContents = function() {
      var fileObject, _i, _len, _ref;
      this.contents = fs.readFileSync(require.resolve('jade').replace('index.js', 'runtime.js'));
      if (this.clientRack != null) {
        this.contents += '(function(){ \n';
      }
      if (this.clientRack != null) {
        this.contents += this.clientRack.contents;
      }
      this.contents += "window." + this.clientVariable + " = {\n";
      _ref = this.fileObjects;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fileObject = _ref[_i];
        this.contents += "'" + fileObject.funcName + "': " + fileObject.compiled + ",";
      }
      this.contents += '};';
      if (this.clientRack != null) {
        this.contents += '})();';
      }
      if (this.compress) {
        this.contents = uglify.minify(this.contents, {
          fromString: true
        }).code;
      }
      return this.emit('created');
    };

    JadeAsset.prototype.getFileobjects = function(dirname, prefix) {
      var compiled, fileContents, filename, filenames, funcName, newPrefix, path, paths, stats, _i, _len;
      if (prefix == null) {
        prefix = '';
      }
      filenames = fs.readdirSync(dirname);
      paths = [];
      for (_i = 0, _len = filenames.length; _i < _len; _i++) {
        filename = filenames[_i];
        if (filename.slice(0, 1) === '.') {
          continue;
        }
        path = pathutil.join(dirname, filename);
        stats = fs.statSync(path);
        if (stats.isDirectory()) {
          newPrefix = "" + prefix + (pathutil.basename(path)) + this.separator;
          paths = paths.concat(this.getFileobjects(path, newPrefix));
        } else {
          if (filename.indexOf('.jade') === -1) {
            continue;
          }
          funcName = "" + prefix + (pathutil.basename(path, '.jade'));
          fileContents = fs.readFileSync(path, 'utf8');
          if (this.beforeCompile != null) {
            fileContents = this.beforeCompile(fileContents);
          }
          compiled = jade.compile(fileContents, {
            client: true,
            compileDebug: false,
            filename: path
          });
          paths.push({
            path: path,
            funcName: funcName,
            compiled: compiled
          });
        }
      }
      return paths;
    };

    return JadeAsset;

  })(Asset);

}).call(this);
