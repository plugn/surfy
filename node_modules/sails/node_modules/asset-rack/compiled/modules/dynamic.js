// Generated by CoffeeScript 1.4.0
(function() {
  var Asset, async, fs, mime, pathutil, walk,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  pathutil = require('path');

  async = require('async');

  mime = require('mime');

  Asset = require('../.').Asset;

  walk = require('../util').walk;

  exports.DynamicAssets = (function(_super) {

    __extends(DynamicAssets, _super);

    function DynamicAssets() {
      return DynamicAssets.__super__.constructor.apply(this, arguments);
    }

    DynamicAssets.prototype.create = function(options) {
      var _ref, _ref1, _ref2,
        _this = this;
      this.dirname = pathutil.resolve(options.dirname);
      this.type = options.type, this.urlPrefix = options.urlPrefix, this.options = options.options, this.filter = options.filter, this.rewriteExt = options.rewriteExt;
      if ((_ref = this.urlPrefix) == null) {
        this.urlPrefix = '/';
      }
      if (this.urlPrefix.slice(-1) !== '/') {
        this.urlPrefix += '/';
      }
      if (this.type.prototype.mimetype != null) {
        if ((_ref1 = this.rewriteExt) == null) {
          this.rewriteExt = mime.extensions[this.type.prototype.mimetype];
        }
      }
      if ((this.rewriteExt != null) && this.rewriteExt[0] !== '.') {
        this.rewriteExt = '.' + this.rewriteExt;
      }
      if ((_ref2 = this.options) == null) {
        this.options = {};
      }
      this.options.hash = this.hash;
      this.options.maxAge = this.maxAge;
      this.assets = [];
      return walk(this.dirname, {
        ignoreFolders: true,
        filter: this.filter
      }, function(file, done) {
        var asset, k, opts, url, v, _ref3;
        url = pathutil.dirname(file.relpath);
        url = url.split(pathutil.sep);
        if (url[0] === '.') {
          url = [];
        }
        if (_this.rewriteExt != null) {
          url.push(file.namenoext + _this.rewriteExt);
        } else {
          url.push(file.name);
        }
        opts = {
          url: _this.urlPrefix + url.join('/'),
          filename: file.path
        };
        _ref3 = _this.options;
        for (k in _ref3) {
          if (!__hasProp.call(_ref3, k)) continue;
          v = _ref3[k];
          opts[k] = v;
        }
        asset = new _this.type(opts);
        return asset.on('complete', function() {
          _this.assets.push(asset);
          return done();
        });
      }, function(err) {
        if (err != null) {
          return _this.emit('error', err);
        }
        return _this.emit('created');
      });
    };

    return DynamicAssets;

  })(Asset);

}).call(this);
