// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter, async, crypto, extend, mime, pathutil, zlib,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  async = require('async');

  crypto = require('crypto');

  pathutil = require('path');

  zlib = require('zlib');

  mime = require('mime');

  mime.types.js = 'text/javascript';

  mime.extensions['text/javascript'] = 'js';

  extend = require('./util').extend;

  EventEmitter = require('events').EventEmitter;

  exports.Asset = (function(_super) {

    __extends(Asset, _super);

    Asset.prototype.defaultMaxAge = 60 * 60 * 24 * 365;

    function Asset(options) {
      var headers, key, value, _ref, _ref1, _ref2,
        _this = this;
      Asset.__super__.constructor.call(this);
      if (options == null) {
        options = {};
      }
      if (options.url != null) {
        this.url = options.url;
      }
      if (options.contents != null) {
        this.contents = options.contents;
      }
      this.headers = options.headers ? options.headers : {};
      headers = {};
      _ref = this.headers;
      for (key in _ref) {
        value = _ref[key];
        headers[key.toLowerCase()] = value;
      }
      this.headers = headers;
      this.ext = pathutil.extname(this.url);
      if (options.mimetype != null) {
        this.mimetype = options.mimetype;
      }
      if ((_ref1 = this.mimetype) == null) {
        this.mimetype = mime.types[this.ext.slice(1, this.ext.length)];
      }
      if ((_ref2 = this.mimetype) == null) {
        this.mimetype = 'text/plain';
      }
      this.gzip = options.gzip;
      if (options.hash != null) {
        this.hash = options.hash;
      }
      if (options.maxAge != null) {
        this.maxAge = options.maxAge;
      }
      if (options.allowNoHashCache != null) {
        this.allowNoHashCache = options.allowNoHashCache;
      }
      this.on('newListener', function(event, listener) {
        if (event === 'complete' && _this.completed === true) {
          return listener();
        }
      });
      this.on('created', function(data) {
        if ((data != null ? data.contents : void 0) != null) {
          _this.contents = data.contents;
        }
        if ((data != null ? data.assets : void 0) != null) {
          _this.assets = data.assets;
        }
        if (_this.contents != null) {
          _this.createSpecificUrl();
          _this.createHeaders();
        }
        _this.completed = true;
        return _this.emit('complete');
      });
      this.on('error', function(error) {
        if (_this.listeners('error' === 1)) {
          throw error;
        }
      });
      this.on('start', function() {
        var _ref3, _ref4, _ref5, _ref6, _ref7;
        if ((_ref3 = _this.maxAge) == null) {
          _this.maxAge = (_ref4 = _this.rack) != null ? _ref4.maxAge : void 0;
        }
        if (_this.hash !== false) {
          if ((_ref5 = _this.maxAge) == null) {
            _this.maxAge = _this.defaultMaxAge;
          }
        }
        if ((_ref6 = _this.allowNoHashCache) == null) {
          _this.allowNoHashCache = (_ref7 = _this.rack) != null ? _ref7.allowNoHashCache : void 0;
        }
        return _this.create(options);
      });
      process.nextTick(function() {
        var _ref3;
        if ((_ref3 = _this.maxAge) == null) {
          _this.maxAge = _this.defaultMaxAge;
        }
        if (_this.rack == null) {
          return _this.create(options);
        }
      });
    }

    Asset.prototype.respond = function(request, response) {
      var headers, key, value, _ref;
      headers = {};
      if (request.url === this.url && this.allowNoHashCache !== true) {
        _ref = this.headers;
        for (key in _ref) {
          value = _ref[key];
          headers[key] = value;
        }
        delete headers['cache-control'];
      } else {
        headers = this.headers;
      }
      for (key in headers) {
        value = headers[key];
        response.header(key, value);
      }
      if (this.gzip) {
        return response.send(this.gzipContents);
      } else {
        return response.send(this.contents);
      }
    };

    Asset.prototype.checkUrl = function(url) {
      return url === this.specificUrl || (!(this.hash != null) && url === this.url);
    };

    Asset.prototype.handle = function(request, response, next) {
      var handle,
        _this = this;
      handle = function() {
        var asset, _i, _len, _ref;
        if (_this.assets != null) {
          _ref = _this.assets;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            asset = _ref[_i];
            if (asset.checkUrl(request.url)) {
              return asset.respond(request, response);
            }
          }
        }
        if (_this.checkUrl(request.url)) {
          return _this.respond(request, response);
        } else {
          return next();
        }
      };
      if (this.completed === true) {
        return handle();
      } else {
        return this.on('complete', function() {
          return handle();
        });
      }
    };

    Asset.prototype.create = function(options) {
      return this.emit('created');
    };

    Asset.prototype.createHeaders = function() {
      var _base, _base1, _base2, _ref, _ref1, _ref2;
      if ((_ref = (_base = this.headers)['content-type']) == null) {
        _base['content-type'] = "" + this.mimetype;
      }
      if (this.gzip) {
        if ((_ref1 = (_base1 = this.headers)['content-encoding']) == null) {
          _base1['content-encoding'] = 'gzip';
        }
      }
      if (this.maxAge != null) {
        return (_ref2 = (_base2 = this.headers)['cache-control']) != null ? _ref2 : _base2['cache-control'] = "public, max-age=" + this.maxAge;
      }
    };

    Asset.prototype.tag = function() {
      var tag;
      switch (this.mimetype) {
        case 'text/javascript':
          tag = "\n<script type=\"" + this.mimetype + "\" ";
          return tag += "src=\"" + this.specificUrl + "\"></script>";
        case 'text/css':
          return "\n<link rel=\"stylesheet\" href=\"" + this.specificUrl + "\">";
      }
    };

    Asset.prototype.createSpecificUrl = function() {
      var _this = this;
      this.md5 = crypto.createHash('md5').update(this.contents).digest('hex');
      if (this.hash === false) {
        this.useDefaultMaxAge = false;
        return this.specificUrl = this.url;
      }
      this.specificUrl = "" + (this.url.slice(0, this.url.length - this.ext.length)) + "-" + this.md5 + this.ext;
      if (this.hostname != null) {
        this.specificUrl = "//" + this.hostname + this.specificUrl;
      }
      if (this.gzip) {
        return zlib.gzip(this.contents, function(error, gzip) {
          return _this.gzipContents = gzip;
        });
      }
    };

    Asset.prototype.isRelevantUrl = function(specificUrl) {
      var baseUrl;
      baseUrl = this.url.slice(0, this.url.length - this.ext.length);
      if (specificUrl.indexOf(baseUrl !== -1 && this.ext === pathutil.extname(specificUrl))) {
        return true;
      }
      return false;
    };

    Asset.extend = extend;

    return Asset;

  })(EventEmitter);

}).call(this);
